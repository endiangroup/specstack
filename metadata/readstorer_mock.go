// Code generated by mockery v1.0.0. DO NOT EDIT.

package metadata

import io "io"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/satori/go.uuid"

// MockReadStorer is an autogenerated mock type for the ReadStorer type
type MockReadStorer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockReadStorer) Delete(_a0 io.Reader, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: _a0
func (_m *MockReadStorer) Read(_a0 io.Reader) ([]*Entry, error) {
	ret := _m.Called(_a0)

	var r0 []*Entry
	if rf, ok := ret.Get(0).(func(io.Reader) []*Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *MockReadStorer) Store(_a0 io.Reader, _a1 *Entry) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, *Entry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
