// Code generated by mockery v1.0.0. DO NOT EDIT.

package specstack

import errors "github.com/endiangroup/specstack/errors"
import mock "github.com/stretchr/testify/mock"
import specification "github.com/endiangroup/specstack/specification"

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// GetConfiguration provides a mock function with given fields: _a0
func (_m *MockController) GetConfiguration(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialise provides a mock function with given fields:
func (_m *MockController) Initialise() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfiguration provides a mock function with given fields:
func (_m *MockController) ListConfiguration() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfiguration provides a mock function with given fields: _a0, _a1
func (_m *MockController) SetConfiguration(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Specification provides a mock function with given fields:
func (_m *MockController) Specification() (*specification.Specification, errors.Warnings, error) {
	ret := _m.Called()

	var r0 *specification.Specification
	if rf, ok := ret.Get(0).(func() *specification.Specification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*specification.Specification)
		}
	}

	var r1 errors.Warnings
	if rf, ok := ret.Get(1).(func() errors.Warnings); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Warnings)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
