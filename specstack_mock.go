// Code generated by mockery v1.0.0. DO NOT EDIT.

package specstack

import metadata "github.com/endiangroup/specstack/metadata"
import mock "github.com/stretchr/testify/mock"

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// AddMetadataToScenario provides a mock function with given fields: scenarioName, storyName, key, value
func (_m *MockController) AddMetadataToScenario(scenarioName string, storyName string, key string, value string) error {
	ret := _m.Called(scenarioName, storyName, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(scenarioName, storyName, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMetadataToStory provides a mock function with given fields: storyName, key, value
func (_m *MockController) AddMetadataToStory(storyName string, key string, value string) error {
	ret := _m.Called(storyName, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(storyName, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfiguration provides a mock function with given fields: _a0
func (_m *MockController) GetConfiguration(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScenarioMetadata provides a mock function with given fields: scenario, story
func (_m *MockController) GetScenarioMetadata(scenario string, story string) ([]*metadata.Entry, error) {
	ret := _m.Called(scenario, story)

	var r0 []*metadata.Entry
	if rf, ok := ret.Get(0).(func(string, string) []*metadata.Entry); ok {
		r0 = rf(scenario, story)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(scenario, story)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoryMetadata provides a mock function with given fields: _a0
func (_m *MockController) GetStoryMetadata(_a0 string) ([]*metadata.Entry, error) {
	ret := _m.Called(_a0)

	var r0 []*metadata.Entry
	if rf, ok := ret.Get(0).(func(string) []*metadata.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialise provides a mock function with given fields:
func (_m *MockController) Initialise() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfiguration provides a mock function with given fields:
func (_m *MockController) ListConfiguration() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields:
func (_m *MockController) Pull() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields:
func (_m *MockController) Push() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunRepoPostMergeHook provides a mock function with given fields:
func (_m *MockController) RunRepoPostMergeHook() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunRepoPrePushHook provides a mock function with given fields:
func (_m *MockController) RunRepoPrePushHook() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConfiguration provides a mock function with given fields: _a0, _a1
func (_m *MockController) SetConfiguration(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
